from collections import deque
graph = [
    [0, 1, 1, 0, 0, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0, 0],
    [1, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 1, 0, 1, 1, 1, 0],
    [0, 0, 0, 1, 0, 1, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 1, 0]
]



def dfs(g, i , visited):
    visited[i] = 1
    print(chr(ord('A') + i), end= ' ')
    #chr(ord('A') : A를 아스키 코드 65로 만들어줌. A + 0 : A , A + 1 : B .... 형식이되는 것임.
    for j in range(len(graph)):
        if g[i][j] == 1 and not visited[j]:
            dfs(g, j, visited)



def bfs(g,i,visited):
    if not visited[i] :
        visited[i] = 1
        print(chr(ord('A')+i),end=' ')
    for num in range(len(graph)):
        if g[i][num] == 1 and not visited[num]:
            visited[num] = 1
    for num in range(len(graph)):
        if g[i][num]==1 :
            bfs(g,num,visited)


visited_dfs = [0 for _ in range(len(graph))]
visited_bfs = [0 for _ in range(len(graph))]
dfs(graph, 6 , visited_dfs)
print()
bfs(graph, 4, visited_bfs)
